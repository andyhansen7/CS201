CS 201 8-31-20

Dynamic Arrays and Amortized Analysis

Ex: Show that 10n^2 lg(n) + 5n^2 -13 lg(n) + 10 is Theta(n^2 lg())

    c_1 * n^2 lg(n) < 10n^2 lg(n) + 5n^2 -13 lg(n) + 10

    c_1 = 9

    c_2 = 12

    n_0 = 32

Amortized Analysis:

	- Cost per operation over a sequence of operations
	- Total work for N operations divided by N
	- Different than average case

	Ex: Binary counting
	
		Cost is 1,2,1,3,1,2,1,4...

		Number of changes for bit 1 is N, bit 2 is N/2

		Therefore, the total changes is the sum from o to logN of N/2^i

		Which is equal to 2

	Ex: Amortized analysis of:

		Push: O(1)
		Pop: O(1)
		Multi-Pop: O(N)

Dynamic Arrays:

	- Implement arrays without a fixed size limit
	- Insert adds new element to end of array
	- Resize array when full, add double space
	
	- Ex: Total cost of N=2^k operations:
		- N inserts
		- 2 + 4 + 8 => N + N/2 + ... 2^k
		- Total cost: 3N

	- Reduce array size at 25% capacity - keeps it half full
	- Goal is to always have at least 25% of the array filled
	- 3 tokens for both insert and deleted
	- O(1) amortized per operation
	- O(N) worst case for any operation 