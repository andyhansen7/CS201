CS 201 08-24-20

Syllabus Notes:

    Final projects: cumuative data structures library, building off previous material
        - Code will be evaluated at certain points

    Dead week: 1 - on - 1 presentations of code with Dr. Dixon to explain code snippets

    Most data structures will be template based

Theta Notation:

    - Tightly bound on both top and bottom my asymototic bounds

    - Ex: 17n^2 -10n + 50 is Theta(n^2)

        n^2 < 17n^2 - 10n + 50

        Ignore 50 because it increases equation

        c_1 * n^2 < 17n^2 - 10n

        Divide by n^2

        c_1 < 17 - 10/n

        c_1 <= 16 for n >= 10

        c_2 = 18, n_0 = 8

        16n^2 <= 17n^2-10n+50 <= 18n^2 for sufficient n

Big O Notation:

    - Bound on top by asymptotic bound

    - There exists some c and n_0 such that 0 <= f(n) <= cg(n) for all n >= n_0 

    - Example: 17n^2 -10n + 50 is O(n^2)

        17n^2 - 10n + 50 <= c * n^2

        Ignore 10n because it decreases the equation

        17n^2 + 50 <= c * n^2

        Any number >= 17 works

        Using c = 18:

        50 <= n^2

        So as long as n >= sqrt(50), this is a true statement

Big Omega Notation:

    - Bound on bottom by asymptotic bound ( see lower limit in Big Theta Notation )

Little o Notation:

    - Constant c exists, but works for every n, not just large n 

    - Much looser bound than Big O 



